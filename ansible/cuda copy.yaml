---
- name: Install CUDA, PyEnv, latest Python 3.10, and PyTorch
  hosts: all
  become: true
  vars:
    distro: ubuntu2204
    arch: x86_64
    MINICONDA_ROOT: /opt/miniconda3
  environment:
    MINICONDA_ROOT: "{{ MINICONDA_ROOT }}"
    CONDA: "{{ MINICONDA_ROOT }}/bin/conda"
    CUDA_PATH: "/usr/local/cuda-11.7/bin"
  tasks:
    - name: Install required packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - build-essential
        - git
        - wget
        - libglvnd # needed by NVidia driver
    # Miniconda
    - name: Download Miniconda installer
      get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: /tmp/miniconda.sh
        mode: "0755"
    - name: Install Miniconda
      shell: /tmp/miniconda.sh -b -p $MINICONDA_ROOT
      args:
        executable: /bin/bash
        creates: "{{ MINICONDA_ROOT }}"
    - name: Chown "{{ MINICONDA_ROOT }}"
      file:
        path: "{{ MINICONDA_ROOT }}"
        state: directory
        recurse: yes
        owner: "{{ansible_ssh_user}}"
        group: "{{ansible_ssh_user}}"
    - name: Add Miniconda to PATH
      lineinfile:
        path: /etc/profile.d/miniconda.sh
        line: 'export PATH="$MINICONDA_ROOT/bin:$PATH"'
        create: true
        state: present
    - name: "Initialise for {{ansible_ssh_user}}"
      shell: "$CONDA init $(echo $SHELL | awk -F/ '{print $NF}')"
      become: false

    # PyTorch
    - name: Check if Conda environment exists
      shell: $CONDA env list | grep sd
      register: env_result
      ignore_errors: true
    - name: Update environment (this might take a while...)
      command: $CONDA env update -f /opt/miniconda3/sd-conda.yaml
      when: env_result.rc == 0 or env_result is not failed
      become: false
    - block:
        - name: Determine latest Python 3.10 version available in conda-forge channel
          shell: $CONDA search python=3.10 --full-name --channel conda-forge | awk '/^python[[:space:]]+3\.10/ {print $2}' | tail -n 1
          register: python_310_version
        - name: Print latest Python 3.10 version
          debug:
            var: python_310_version.stdout
        - name: Use latest Python 3.10 version in template
          template:
            src: templates/sd-conda.yaml.j2
            dest: "{{ MINICONDA_ROOT }}/sd-conda.yaml"
        - name: Create environment (this might take a while...)
          command: $CONDA env create -f $MINICONDA_ROOT/sd-conda.yaml
      when: env_result.rc != 0 or env_result is failed
      become: false

    # CUDA
    - name: Install Linux headers
      shell: "apt install -y linux-headers-$(uname -r)"
    - name: Remove old key
      apt_key:
        id: 7fa2af80
        state: absent
    # see: https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local
    # and our version: https://developer.nvidia.com/cuda-11-7-1-download-archive?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local
    - name: Add pin file to prioritize CUDA repository
      get_url:
        url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
        dest: /etc/apt/preferences.d/cuda-repository-pin-600
    - name: Obtain CUDA .deb
      get_url:
        url: https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda-repo-ubuntu2204-11-7-local_11.7.1-515.65.01-1_amd64.deb
        dest: /tmp/cuda.deb
    - name: Install local repository on file system
      apt:
        deb: /tmp/cuda.deb
        state: present
    - name: Enroll ephemeral public GPG key
      shell: sudo cp /var/cuda-repo-ubuntu2204-11-7-local/cuda-*-keyring.gpg /usr/share/keyrings/
    - name: Update APT and Install CUDA (this will take a while...)
      apt:
        name: "{{item}}"
        state: present
        update_cache: true
      loop:
        - cuda
        - nvidia-cuda-toolkit
    # https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions
    - name: Add CUDA to PATH
      lineinfile:
        path: /etc/profile.d/cuda.sh
        line: "export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}"
        create: true
        state: present
    - name: Check if CUDA is installed
      shell: "$CUDA_PATH/nvcc --version"
      register: cuda_installed
      ignore_errors: true
    - name: Print CUDA version
      debug:
        var: cuda_installed.stdout_lines
    - name: Fail if CUDA is not installed
      fail:
        msg: "CUDA is not installed on this system. Please install CUDA before proceeding."
      when: cuda_installed.rc != 0
